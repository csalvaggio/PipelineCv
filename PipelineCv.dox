/**
 * @file PipelineCv.dox
 * @brief Main documentation page and group definitions for pcv pipe adapters.
 */

/**
 * @mainpage PipelineCv - A pipeline OpenCV adapter library
 *
 * @section intro_sec Overview
 * The PipelineCv defined adapters provide a tiny, header-only toolkit for composing
 * OpenCV cv::Mat transforms using a functional pipe style:
 *
 * @code{.cpp}
 * cv::Mat img = cv::imread("in.png", cv::IMREAD_COLOR);
 *  
 * cv::Mat spectrum = img
 *   | pcv::to_float()         // convert to CV_32F in [0,1]
 *   | pcv::to_gray()          // grayscale
 *   | pcv::pad_to_even()      // FFT-friendly sizes
 *   | pcv::dft()              // two-channel complex DFT
 *   | pcv::fft_shift()        // center DC
 *   | pcv::power_spectrum();  // |F|^2 (log)
 * @endcode
 *
 * @section build_sec Build & Include
 * - Requires a C++ compiler that supports the C++20 dialect/ISO standard
 * - Requires OpenCV (v. 4.3.0 or higher) (core/imgproc)
 * - Include the header where you build your pipeline:
 *
 * @code{.cpp}
 * #include "pcv/PipelineCv.h"
 * @endcode
 *
 * @section testing_sec Testing
 * In the build directory:
 * @code{.sh}
 * bin/test_pipeline_cv
 * @endcode
 *
 * @section examples_sec Quick Examples
 *
 * @subsection ex_normalize Normalize and Clamp
 * @code{.cpp}
 * cv::Mat out = img | pcv::to_float() | pcv::normalize(0.0, 1.0) | pcv::clamp(0.0, 1.0);
 * @endcode
 *
 * @subsection ex_fourier Fourier Transform & Magnitude
 * @code{.cpp}
 * cv::Mat mag = img | pcv::to_float() | pcv::to_gray() | pcv::to_complex() | pcv::dft() | pcv::magnitude();
 * @endcode
 *
 * @subsection ex_blend Affine Blend
 * @code{.cpp}
 * cv::Mat blended = img | pcv::add(other, alpha=1.0, beta=0.7, gamma=0.0);
 * @endcode
 *
 * @section api_sec API Reference
 * See the organized function groups:
 * - @ref type_and_channel_adapters - Type conversions and channel extraction/combination
 * - @ref scalar_value_transforms - Scalar/value transformations and per-pixel operations
 * - @ref elementwise_operations - Element-wise arithmetic between two cv::Mats
 * - @ref complex_domain_operations - Complex-domain operations
 * - @ref fourier_frequency_domain_utilities - Fourier and frequency domain utilities
 * - @ref spatial_utilities - Spatial/geometric modifications
 *
 * @section notes_sec Notes
 * - The pipe operator accepts any callable with signature `cv::Mat(const cv::Mat&)`
 * - Helpers that expect complex data require 2-channel inputs (`CV_32FC2`/`CV_64FC2`)
 * - For FFT visualization, prefer even dimensions (pcv::pad_to_even()) and center DC with pcv::fft_shift()
 *
 * @section error_sec Error Handling
 * Most adapters use `CV_Assert` for precondition checks (e.g., complex inputs must have 2 channels)
 *
 * @section perf_sec Performance Tips
 * - Prefer `CV_32F` for frequency operations; convert once, process, then convert back
 * - Use pcv::pad_to_even() before pcv::dft() for clean quadrant swaps with pcv::fft_shift()
 * - Compose operations to minimize intermediate copies when practical
 *
 * @section contact_sec Contact
 * @par Author
 * Carl Salvaggio, Ph.D.
 *
 * @par E-mail
 * carl.salvaggio@rit.edu
 *
 * @par Organization
 * Chester F. Carlson Center for Imaging Science@n
 * Rochester Institute of Technology@n
 * Rochester, New York, 14623@n
 * United States
 */

// ============================================================================
// Group Definitions
// ============================================================================

/** 
 * @defgroup type_and_channel_adapters Type and Channel Adapters
 * @brief Functions related to type conversions and channel extraction/combination.
 */

/** 
 * @defgroup scalar_value_transforms Scalar/Value Transforms
 * @brief Functions for scalar/value transformations and per-pixel value operations.
 */

/** 
 * @defgroup elementwise_operations Element-wise Arithmetic Operations
 * @brief Functions for performing element-wise mathematical operations between two cv::Mats.
 */

/** 
 * @defgroup complex_domain_operations Complex-Domain Operations
 * @brief Functions for performing element-wise complex-domain operations.
 */

/** 
 * @defgroup fourier_frequency_domain_utilities Fourier/Frequency-Domain Utilities
 * @brief Fourier and frequency domain utility functions.
 */

/** 
 * @defgroup spatial_utilities Spatial Utilities
 * @brief Spatial utilities for geometrically modifying cv::Mats.
 */
